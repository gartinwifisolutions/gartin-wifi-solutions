const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const session = require('express-session');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Database setup
const db = new sqlite3.Database('consultations.db');

// Create tables
db.serialize(() => {
    // Consultations table
    db.run(`CREATE TABLE IF NOT EXISTS consultations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        address TEXT NOT NULL,
        address2 TEXT,
        city TEXT NOT NULL,
        state TEXT NOT NULL,
        zip TEXT NOT NULL,
        phone TEXT NOT NULL,
        email TEXT NOT NULL,
        message TEXT,
        status TEXT DEFAULT 'new',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // Admin account table
    db.run(`CREATE TABLE IF NOT EXISTS admin (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL
    )`);

    // Create default admin account if it doesn't exist
    const defaultAdmin = {
        username: 'admin',
        password: 'change_this_password'
    };

    db.get('SELECT * FROM admin WHERE username = ?', [defaultAdmin.username], async (err, row) => {
        if (err) {
            console.error('Error checking admin account:', err);
            return;
        }

        if (!row) {
            const hashedPassword = await bcrypt.hash(defaultAdmin.password, 10);
            db.run('INSERT INTO admin (username, password) VALUES (?, ?)', 
                [defaultAdmin.username, hashedPassword],
                (err) => {
                    if (err) {
                        console.error('Error creating admin account:', err);
                    } else {
                        console.log('Default admin account created. Please change the password immediately.');
                    }
                }
            );
        }
    });

    // Create a test consultation for demonstration
    const testConsultation = {
        name: 'Test Client',
        address: '123 Main Street',
        address2: 'Suite 100',
        city: 'Columbus',
        state: 'OH',
        zip: '43215',
        phone: '(614) 555-0123',
        email: 'test@example.com',
        message: 'Interested in:\n- Home WiFi optimization for 2400 sq ft home\n- Smart thermostat installation\n- Blink doorbell camera setup\n\nCurrent issues: Poor WiFi coverage in basement and back yard.',
        status: 'new',
        created_at: new Date().toISOString()
    };

    const sql = `INSERT INTO consultations (name, address, address2, city, state, zip, phone, email, message, status, created_at)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

    db.run(sql, [
        testConsultation.name,
        testConsultation.address,
        testConsultation.address2,
        testConsultation.city,
        testConsultation.state,
        testConsultation.zip,
        testConsultation.phone,
        testConsultation.email,
        testConsultation.message,
        testConsultation.status,
        testConsultation.created_at
    ], function(err) {
        if (err) {
            console.error('Error creating test consultation:', err);
        } else {
            console.log('Test consultation created successfully');
        }
    });
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname)));
app.use(session({
    secret: 'your-military-grade-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));

// Serve static files
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/consultation', (req, res) => {
    res.sendFile(path.join(__dirname, 'consultation.html'));
});

// Admin authentication routes
app.post('/admin/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const sql = 'SELECT * FROM admin WHERE username = ?';
        db.get(sql, [username], async (err, user) => {
            if (err) {
                console.error('Database error:', err);
                return res.status(500).json({ error: 'Internal server error' });
            }

            if (!user) {
                return res.status(401).json({ error: 'Invalid credentials' });
            }

            const validPassword = await bcrypt.compare(password, user.password);
            if (!validPassword) {
                return res.status(401).json({ error: 'Invalid credentials' });
            }

            req.session.authenticated = true;
            req.session.userId = user.id;
            res.json({ success: true });
        });
    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.post('/admin/logout', (req, res) => {
    req.session.destroy();
    res.json({ success: true });
});

// Admin password change
app.post('/admin/change-password', requireAuth, async (req, res) => {
    const { currentPassword, newPassword } = req.body;

    try {
        const sql = 'SELECT * FROM admin WHERE id = ?';
        db.get(sql, [req.session.userId], async (err, user) => {
            if (err) {
                console.error('Database error:', err);
                return res.status(500).json({ error: 'Internal server error' });
            }

            const validPassword = await bcrypt.compare(currentPassword, user.password);
            if (!validPassword) {
                return res.status(401).json({ error: 'Invalid current password' });
            }

            const hashedPassword = await bcrypt.hash(newPassword, 10);
            db.run('UPDATE admin SET password = ? WHERE id = ?', 
                [hashedPassword, req.session.userId],
                (err) => {
                    if (err) {
                        console.error('Error updating password:', err);
                        return res.status(500).json({ error: 'Failed to update password' });
                    }
                    res.json({ success: true });
                }
            );
        });
    } catch (error) {
        console.error('Password change error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Handle consultation submissions
app.post('/submit-consultation', (req, res) => {
    const {
        name,
        address,
        address2,
        city,
        state,
        zip,
        phone,
        email,
        message
    } = req.body;

    // Validate required fields
    if (!name || !address || !city || !state || !zip || !phone || !email) {
        return res.status(400).json({ error: 'All required fields must be filled out' });
    }

    const sql = `INSERT INTO consultations (name, address, address2, city, state, zip, phone, email, message, status)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

    db.run(sql, [name, address, address2, city, state, zip, phone, email, message, 'new'], function(err) {
        if (err) {
            console.error('Error saving consultation:', err);
            return res.status(500).json({ error: 'Failed to save consultation' });
        }
        res.json({ success: true, id: this.lastID });
    });
});

// Get consultations (requires authentication)
app.get('/admin/consultations', requireAuth, (req, res) => {
    const sql = 'SELECT * FROM consultations ORDER BY created_at DESC';
    db.all(sql, [], (err, rows) => {
        if (err) {
            console.error('Error fetching consultations:', err);
            return res.status(500).json({ error: 'Failed to fetch consultations' });
        }
        res.json(rows);
    });
});

// Update consultation status (requires authentication)
app.put('/admin/consultations/:id', requireAuth, (req, res) => {
    const { id } = req.params;
    const { status } = req.body;

    if (!['new', 'contacted', 'scheduled', 'completed'].includes(status)) {
        return res.status(400).json({ error: 'Invalid status' });
    }

    const sql = 'UPDATE consultations SET status = ? WHERE id = ?';
    db.run(sql, [status, id], function(err) {
        if (err) {
            console.error('Error updating consultation:', err);
            return res.status(500).json({ error: 'Failed to update consultation' });
        }
        if (this.changes === 0) {
            return res.status(404).json({ error: 'Consultation not found' });
        }
        res.json({ success: true });
    });
});

// Authentication middleware
function requireAuth(req, res, next) {
    if (!req.session.authenticated) {
        return res.status(401).json({ error: 'Unauthorized' });
    }
    next();
}

// Start server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log('Default admin credentials:');
    console.log('Username: admin');
    console.log('Password: change_this_password');
});
